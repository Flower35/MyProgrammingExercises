#ifndef H_TETRIS_OTHER
#define H_TETRIS_OTHER

namespace Tetris
{

    ////////////////////////////////////////////////////////////////
    // Tekstura bloku
    ////////////////////////////////////////////////////////////////

    #define BLOCK_TEXTURE_WIDTH  16


    ////////////////////////////////////////////////////////////////
    // Modele tetromino
    ////////////////////////////////////////////////////////////////

    #define TETROMINOS  7

    const uint8_t TETROMINO_DIM[TETROMINOS] =
    {
        3, 3, 3, 4, 3 ,3 ,4
    };

    const uint8_t TETROMINO_T[2 * 3] =
    {
        0xFF, 0xFF, 0xFF,
        0x00, 0xFF, 0x00
    };

    const uint8_t TETROMINO_J[2 * 3] =
    {
        0xFF, 0xFF, 0xFF,
        0x00, 0x00, 0xFF
    };

    const uint8_t TETROMINO_Z[2 * 3] =
    {
        0xFF, 0xFF, 0x00,
        0x00, 0xFF, 0xFF
    };

    const uint8_t TETROMINO_O[2 * 4] =
    {
        0x00, 0xFF, 0xFF, 0x00,
        0x00, 0xFF, 0xFF, 0x00
    };

    const uint8_t TETROMINO_S[2 * 3] =
    {
        0x00, 0xFF, 0xFF,
        0xFF, 0xFF, 0x00
    };

    const uint8_t TETROMINO_L[2 * 3] =
    {
        0xFF, 0xFF, 0xFF,
        0xFF, 0x00, 0x00
    };

    const uint8_t TETROMINO_I[2 * 4] =
    {
        0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0x00, 0x00, 0x00
    };

    extern const uint8_t * TETROMINO_SET[TETROMINOS];


    ////////////////////////////////////////////////////////////////
    // Logo w menu
    ////////////////////////////////////////////////////////////////

    #define TETRIS_LOGO_WIDTH  26
    #define TETRIS_LOGO_HEIGHT  5

    const uint8_t TETRIS_LOGO[TETRIS_LOGO_WIDTH * TETRIS_LOGO_HEIGHT] =
    {
        0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
        0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
        0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
        0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF,
        0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF
    };

}

#endif
